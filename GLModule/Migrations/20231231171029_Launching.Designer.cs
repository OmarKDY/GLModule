// <auto-generated />
using System;
using GLModule.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GLModule.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231231171029_Launching")]
    partial class Launching
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GLModule.Domain.Entities.Account", b =>
                {
                    b.Property<int>("AccountCode")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("AccountTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDebit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParent")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("ParentAccountCode")
                        .HasColumnType("int");

                    b.HasKey("AccountCode");

                    b.HasIndex("AccountName")
                        .IsUnique();

                    b.HasIndex("AccountTransactionId")
                        .IsUnique()
                        .HasFilter("[AccountTransactionId] IS NOT NULL");

                    b.HasIndex("ParentAccountCode");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.AccountTransaction", b =>
                {
                    b.Property<Guid>("AccountTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccountCode")
                        .HasColumnType("int");

                    b.Property<int?>("CashBankReceiptId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("CashBankReceiveId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("ChequeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DailyJournalId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocSerial")
                        .HasColumnType("int");

                    b.Property<bool>("IsInitialBalance")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AccountTransactionId");

                    b.HasIndex("CashBankReceiptId");

                    b.HasIndex("CashBankReceiveId");

                    b.HasIndex("ChequeId");

                    b.HasIndex("DailyJournalId");

                    b.HasIndex("DocSerial")
                        .IsUnique();

                    b.ToTable("AccountTransactions");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankId"));

                    b.Property<int>("AccountCode")
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BankId");

                    b.HasIndex("AccountCode")
                        .IsUnique();

                    b.HasIndex("BankName")
                        .IsUnique();

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.Cash", b =>
                {
                    b.Property<int>("CashId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CashId"));

                    b.Property<int>("AccountCode")
                        .HasColumnType("int");

                    b.Property<string>("CashName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CashId");

                    b.HasIndex("AccountCode")
                        .IsUnique();

                    b.HasIndex("CashName")
                        .IsUnique();

                    b.ToTable("Cashes");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.CashBankReceipt", b =>
                {
                    b.Property<int>("CashBankReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CashBankReceiptId"));

                    b.Property<int>("AccountCode")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DailyJournalId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CashBankReceiptId");

                    b.HasIndex("AccountCode");

                    b.ToTable("CashBankReceipts");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.CashBankReceive", b =>
                {
                    b.Property<int>("CashBankReceiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CashBankReceiveId"));

                    b.Property<int>("AccountCode")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DailyJournalId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CashBankReceiveId");

                    b.HasIndex("AccountCode");

                    b.ToTable("CashBankReceives");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.Cheque", b =>
                {
                    b.Property<int>("ChequeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChequeId"));

                    b.Property<int>("AccountCode")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DailyJournalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DueChequeDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDueCheque")
                        .HasColumnType("bit");

                    b.HasKey("ChequeId");

                    b.HasIndex("AccountCode");

                    b.HasIndex("DailyJournalId")
                        .IsUnique()
                        .HasFilter("[DailyJournalId] IS NOT NULL");

                    b.ToTable("Cheques");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.DailyJournal", b =>
                {
                    b.Property<int>("DailyJournalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyJournalId"));

                    b.Property<int>("AccountCode")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CashBankReceiptId")
                        .HasColumnType("int");

                    b.Property<int?>("CashBankReceiveId")
                        .HasColumnType("int");

                    b.Property<int?>("ChequeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DailyJournalId");

                    b.HasIndex("AccountCode");

                    b.HasIndex("CashBankReceiptId")
                        .IsUnique()
                        .HasFilter("[CashBankReceiptId] IS NOT NULL");

                    b.HasIndex("CashBankReceiveId")
                        .IsUnique()
                        .HasFilter("[CashBankReceiveId] IS NOT NULL");

                    b.ToTable("DailyJournals");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.Account", b =>
                {
                    b.HasOne("GLModule.Domain.Entities.AccountTransaction", "AccountTransaction")
                        .WithOne("Account")
                        .HasForeignKey("GLModule.Domain.Entities.Account", "AccountTransactionId");

                    b.HasOne("GLModule.Domain.Entities.Account", "ParentAccount")
                        .WithMany("ChildAccounts")
                        .HasForeignKey("ParentAccountCode");

                    b.Navigation("AccountTransaction");

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.AccountTransaction", b =>
                {
                    b.HasOne("GLModule.Domain.Entities.CashBankReceipt", "CashBankReceipt")
                        .WithMany("AccountTransactions")
                        .HasForeignKey("CashBankReceiptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GLModule.Domain.Entities.CashBankReceive", "CashBankReceive")
                        .WithMany("AccountTransactions")
                        .HasForeignKey("CashBankReceiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GLModule.Domain.Entities.Cheque", "Cheque")
                        .WithMany("AccountTransactions")
                        .HasForeignKey("ChequeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GLModule.Domain.Entities.DailyJournal", "DailyJournal")
                        .WithMany("AccountTransactions")
                        .HasForeignKey("DailyJournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CashBankReceipt");

                    b.Navigation("CashBankReceive");

                    b.Navigation("Cheque");

                    b.Navigation("DailyJournal");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.Bank", b =>
                {
                    b.HasOne("GLModule.Domain.Entities.Account", "Account")
                        .WithOne("Bank")
                        .HasForeignKey("GLModule.Domain.Entities.Bank", "AccountCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.Cash", b =>
                {
                    b.HasOne("GLModule.Domain.Entities.Account", "Account")
                        .WithOne("Cash")
                        .HasForeignKey("GLModule.Domain.Entities.Cash", "AccountCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.CashBankReceipt", b =>
                {
                    b.HasOne("GLModule.Domain.Entities.Account", "Account")
                        .WithMany("CashBankReceipts")
                        .HasForeignKey("AccountCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.CashBankReceive", b =>
                {
                    b.HasOne("GLModule.Domain.Entities.Account", "Account")
                        .WithMany("CashBankReceives")
                        .HasForeignKey("AccountCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.Cheque", b =>
                {
                    b.HasOne("GLModule.Domain.Entities.Account", "Account")
                        .WithMany("Cheques")
                        .HasForeignKey("AccountCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GLModule.Domain.Entities.DailyJournal", "DailyJournal")
                        .WithOne("Cheque")
                        .HasForeignKey("GLModule.Domain.Entities.Cheque", "DailyJournalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("DailyJournal");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.DailyJournal", b =>
                {
                    b.HasOne("GLModule.Domain.Entities.Account", "Account")
                        .WithMany("DailyJournals")
                        .HasForeignKey("AccountCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GLModule.Domain.Entities.CashBankReceipt", "CashBankReceipt")
                        .WithOne("DailyJournal")
                        .HasForeignKey("GLModule.Domain.Entities.DailyJournal", "CashBankReceiptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GLModule.Domain.Entities.CashBankReceive", "CashBankReceive")
                        .WithOne("DailyJournal")
                        .HasForeignKey("GLModule.Domain.Entities.DailyJournal", "CashBankReceiveId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("CashBankReceipt");

                    b.Navigation("CashBankReceive");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.Account", b =>
                {
                    b.Navigation("Bank")
                        .IsRequired();

                    b.Navigation("Cash")
                        .IsRequired();

                    b.Navigation("CashBankReceipts");

                    b.Navigation("CashBankReceives");

                    b.Navigation("Cheques");

                    b.Navigation("ChildAccounts");

                    b.Navigation("DailyJournals");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.AccountTransaction", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });

            modelBuilder.Entity("GLModule.Domain.Entities.CashBankReceipt", b =>
                {
                    b.Navigation("AccountTransactions");

                    b.Navigation("DailyJournal")
                        .IsRequired();
                });

            modelBuilder.Entity("GLModule.Domain.Entities.CashBankReceive", b =>
                {
                    b.Navigation("AccountTransactions");

                    b.Navigation("DailyJournal")
                        .IsRequired();
                });

            modelBuilder.Entity("GLModule.Domain.Entities.Cheque", b =>
                {
                    b.Navigation("AccountTransactions");
                });

            modelBuilder.Entity("GLModule.Domain.Entities.DailyJournal", b =>
                {
                    b.Navigation("AccountTransactions");

                    b.Navigation("Cheque")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
